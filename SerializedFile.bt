#include "BuildTarget.bt"
#include "ClassID.bt"
#include "CommonTypeStringTable.bt"

BigEndian();

struct SerializedFileHeader
{
    uint32 metadataSize <format=hex>;
    uint32 fileSize <format=hex>; 
    uint32 version;
    uint32 dataOffset <format=hex>;
    ubyte endianess;
    ubyte reserved[3];
} header;

LittleEndian();

string FindStringInNameTable(int64 table, uint32 offset)
{
    local string result = ReadString(table + offset);
    return result;
}

struct TypeTreeNode(int64 nameTable)
{
    uint16 version;
    ubyte level;
    ubyte isArray;

    uint32 typeStrOffset        : 31;
    uint32 isCommonTypeStr      : 1;

    local string typeStr;
    if (isCommonTypeStr != 0)
    {
        typeStr = FindCommonTypeString(typeStrOffset);
    }
    else
    {
        typeStr = FindStringInNameTable(nameTable, typeStrOffset);
    }
    

    uint32 nameStrOffset        : 31;
    uint32 isCommonNameStr      : 1;

    local string nameStr;
    if (isCommonNameStr != 0)
    {
        nameStr = FindCommonTypeString(nameStrOffset);
    }
    else
    {
        nameStr = FindStringInNameTable(nameTable, nameStrOffset);
    }
    
    int size;
    int index;
    int metaFlag;
};

struct TypeTree (int nodeCount, int nameTableSize)
{
    local int64 nameTableAddr <format = hex> = FTell() + nodeCount * 24;

    // This is an array of children types.
    // Index of 0 presents self

    TypeTreeNode nodes(nameTableAddr)[nodeCount] <optimize=false>;
    char nameTable[nameTableSize];
};

struct SerializedType
{
    ClassID persistentTypeId;
    ubyte unknownFlag;
    int16 unknown;

    if (persistentTypeId == 114 || persistentTypeId == -1)
    {
        uint64 monoBehaviourHashLow <format = hex>;
        uint64 monoBehaviourHashHigh <format = hex>;
    }

    uint64 typeHashLow <format = hex>;
    uint64 typeHashHigh <format = hex>;
    
    // type tree
    int nodeCount <format = hex>;
    int nameTableSize <format = hex>;

    TypeTree typeTree(nodeCount, nameTableSize);
};

struct ObjectInfo
{
    // Start with verison 14, object stream is 4 bytes algined
    local int64 alignedAddr = FTell();
    alignedAddr = (alignedAddr + 3) & (~(3));
    FSeek(alignedAddr);

    int64 pathID;       // Local File ID
    int32 byteStart;
    int32 byteSize;
    int32 typeID;
};

struct UnkownData
{
    local int64 alignedAddr = FTell();
    alignedAddr = (alignedAddr + 3) & (~(3));
    FSeek(alignedAddr);

    int32 unkownDword;
    int64 unkownQword;
};

struct UnityGUID
{
    uint32 data[4];
};

struct FileIdentifier
{
    string unusedStr;
    UnityGUID guid;
    string pathName;
};

struct SerializedFileMetadata
{
    string unityVersion;
    BuildTarget targetPlatform;
    byte hasTypeDefinition;
    int32 typeCount;

    SerializedType serializedTypes[typeCount] <optimize = false>;

    int32 objectCount;

    ObjectInfo objects[objectCount] <optimize = false>;
    
    int32 unkownCount;
    UnkownData unknownData[unkownCount] <optimize = false>;

    int32 externalCount;
    FileIdentifier externals[externalCount] <optimize = false>;

} metadata;

